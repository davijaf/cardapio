<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/mx/florinda/cardapio/HistoricoVisualizacao.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/mx/florinda/cardapio/HistoricoVisualizacao.java" />
              <option name="originalContent" value="package mx.florinda.cardapio;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;import java.util.Optional;&#10;import java.util.WeakHashMap;&#10;&#10;public class HistoricoVisualizacao {&#10;    private final DatabaseHashMap database;&#10;&#10;    // ItemCardapio =&gt; Data e hora da visualização&#10;    private final Map&lt;ItemCardapio, LocalDateTime&gt; historicoVisualizacao = new WeakHashMap&lt;&gt;();//new HashMap&lt;&gt;();&#10;&#10;    public HistoricoVisualizacao(DatabaseHashMap database) {&#10;        this.database = database;&#10;    }&#10;&#10;    // cria comando tostring&#10;    @Override&#10;    public String toString() {&#10;        StringBuilder sb = new StringBuilder();&#10;        sb.append(&quot;Histórico de Visualizações:\n&quot;);&#10;        for (Map.Entry&lt;ItemCardapio, LocalDateTime&gt; entry : historicoVisualizacao.entrySet()) {&#10;            ItemCardapio item = entry.getKey();&#10;            // Only show if item still exists in the database&#10;            if (database.buscarPorId(item.id()).isPresent()) {&#10;                sb.append(&quot;Item: &quot;).append(item.nome())&#10;                  .append(&quot; | Visualizado em: &quot;).append(entry.getValue())&#10;                  .append(&quot;\n&quot;);&#10;            }&#10;        }&#10;        return sb.toString();&#10;    }&#10;&#10;    //Lista as visualizações&#10;    public void listarVisualizacoes() {&#10;        if (historicoVisualizacao.isEmpty()) {&#10;            System.out.println(&quot;Nenhuma visualização registrada.&quot;);&#10;        } else {&#10;            System.out.println(this.toString());&#10;        }&#10;    }&#10;&#10;    //total de itens visualizados&#10;    public int totalVisualizacoes() {&#10;        return historicoVisualizacao.size();&#10;    }&#10;&#10;    public void registrarVisualizacao(Long itemId) {&#10;        Optional&lt;ItemCardapio&gt; itemOpt = database.buscarPorId(itemId);&#10;        if (itemOpt.isPresent()) {&#10;            ItemCardapio item = itemOpt.get();&#10;            LocalDateTime agora = LocalDateTime.now();&#10;            historicoVisualizacao.put(item, agora);&#10;            System.out.println(&quot;Visualizado: &quot; + item.nome() + &quot; em &quot; + agora);&#10;        } else {&#10;            System.out.println(&quot;Item não encontrado para o ID: &quot; + itemId);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package mx.florinda.cardapio;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;import java.util.Optional;&#10;import java.util.WeakHashMap;&#10;&#10;public class HistoricoVisualizacao {&#10;    private final DatabaseHashMap database;&#10;&#10;    // ItemCardapio =&gt; Data e hora da visualização&#10;    private final Map&lt;ItemCardapio, LocalDateTime&gt; historicoVisualizacao = new WeakHashMap&lt;&gt;();//new HashMap&lt;&gt;();&#10;&#10;    public HistoricoVisualizacao(DatabaseHashMap database) {&#10;        this.database = database;&#10;    }&#10;&#10;    // cria comando tostring&#10;    @Override&#10;    public String toString() {&#10;        StringBuilder sb = new StringBuilder();&#10;        sb.append(&quot;Histórico de Visualizações:\n&quot;);&#10;        for (Map.Entry&lt;ItemCardapio, LocalDateTime&gt; entry : historicoVisualizacao.entrySet()) {&#10;            ItemCardapio item = entry.getKey();&#10;            // Only show if item still exists in the database&#10;            if (database.buscarPorId(item.id()).isPresent()) {&#10;                sb.append(&quot;Item: &quot;).append(item.nome())&#10;                  .append(&quot; | Visualizado em: &quot;).append(entry.getValue())&#10;                  .append(&quot;\n&quot;);&#10;            }&#10;        }&#10;        return sb.toString();&#10;    }&#10;&#10;    //Lista as visualizações&#10;    public void listarVisualizacoes() {&#10;        if (historicoVisualizacao.isEmpty()) {&#10;            System.out.println(&quot;Nenhuma visualização registrada.&quot;);&#10;        } else {&#10;            System.out.println(this.toString());&#10;        }&#10;    }&#10;&#10;    //total de itens visualizados&#10;    public int totalVisualizacoes() {&#10;        return historicoVisualizacao.size();&#10;    }&#10;&#10;    public void registrarVisualizacao(Long itemId) {&#10;        Optional&lt;ItemCardapio&gt; itemOpt = database.buscarPorId(itemId);&#10;        if (itemOpt.isPresent()) {&#10;            ItemCardapio item = itemOpt.get();&#10;            LocalDateTime agora = LocalDateTime.now();&#10;            historicoVisualizacao.put(item, agora);&#10;            System.out.println(&quot;Visualizado: &quot; + item.nome() + &quot; em &quot; + agora);&#10;        } else {&#10;            System.out.println(&quot;Item não encontrado para o ID: &quot; + itemId);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>